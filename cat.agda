-- Yu-Yang Lin
-- 26/11/2015
module cat where

open import Agda.Primitive
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning

--=================================================================--
-- PART 1 : Small Categories                                       --
--=================================================================--
---------------------------------------------------------------------
-- For a small category we have the following definition           --
-- - Obj  : Set                           the set of objects       --
-- - Hom  : Obj ‚Üí Obj ‚Üí Set               the set of morphisms     --
-- - id   : ‚àÄ X : Obj.Hom X X             Identity morphism        --
-- - _;_  : ‚àÄ X, Y, Z : Obj.              Composition of morphisms --
--          Hom X Y ‚Üí Hom Y Z ‚Üí Hom X Z                            --
---------------------------------------------------------------------
-------------------------------------------------------------------
-- Added to this definition, we have the laws:                   --
-- -‚àÄ X,Y : Obj. ‚àÄ f : Hom. X Y. id ; f ‚â° f    left identity  --
-- -‚àÄ X,Y : Obj. ‚àÄ f : Hom. X Y. f ; id ‚â° f    right identity --
-- -‚àÄ W,X,Y,Z : Obj.                              associativity  --
--    ‚àÄ f : Hom. W X.                                            --
--    ‚àÄ g : Hom. X Y.                                            --
--    ‚àÄ h : Hom. Y Z.                                            --
--      f ; (g ; h) ‚â° (f ; g) ; h                                --
-------------------------------------------------------------------
record Cat : Set‚ÇÅ where
  field Ob  : Set
        Hom : Ob ‚Üí Ob ‚Üí Set
        id  : {X : Ob} ‚Üí Hom X X
        _‚Ä£_ : {X Y Z : Ob} ‚Üí Hom X Y ‚Üí Hom Y Z ‚Üí Hom X Z

        left_id  : {X Y : Ob} {f : Hom X Y} ‚Üí id ‚Ä£ f ‚â° f
        right_id : {X Y : Ob} {f : Hom X Y} ‚Üí f ‚Ä£ id ‚â° f
        assoc    : {W X Y Z : Ob}
                   {f : Hom W X}
                   {g : Hom X Y}
                   {h : Hom Y Z} ‚Üí f ‚Ä£ (g ‚Ä£ h) ‚â° (f ‚Ä£ g) ‚Ä£ h

--Now we can define a category--
--for instance, the category of endofunctions on Booleans--
--which rises from the monoid formed by the Boolean set and endofunctions--
data Bool : Set where
  true  : Bool
  false : Bool

data Unit : Set where
  unit : Unit

setùîπ : Cat
setùîπ = record
        { Ob  = Unit
        ; Hom = Œª unit unit ‚Üí Bool ‚Üí Bool
        ; id  = Œª b ‚Üí b
        ; _‚Ä£_ = Œª f g  ‚Üí Œª x ‚Üí g (f x)
        ; left_id  = refl
        ; right_id = refl
        ; assoc    = refl
        }

--=================================================================--
-- PART 2 : Universe Polymorphic Category                          --
--=================================================================--
--If we wanted to define Set itself, we would need universe polymorphism--
record Category {l : Level} : Set (lsuc l) where
  field Ob  : Set l
        Hom : Ob ‚Üí Ob ‚Üí Set
        id  : {X : Ob} ‚Üí Hom X X
        _‚Ä£_ : {X Y Z : Ob} ‚Üí Hom X Y ‚Üí Hom Y Z ‚Üí Hom X Z

        left_id  : {X Y : Ob} {f : Hom X Y} ‚Üí id ‚Ä£ f ‚â° f
        right_id : {X Y : Ob} {f : Hom X Y} ‚Üí f ‚Ä£ id ‚â° f
        assoc    : {W X Y Z : Ob}
                   {f : Hom W X}
                   {g : Hom X Y}
                   {h : Hom Y Z} ‚Üí f ‚Ä£ (g ‚Ä£ h) ‚â° (f ‚Ä£ g) ‚Ä£ h

set : Category
set = record
        { Ob  = Set
        ; Hom = Œª X Y ‚Üí X ‚Üí Y
        ; id  = Œª x ‚Üí x
        ; _‚Ä£_ = Œª f g  ‚Üí Œª x ‚Üí g (f x)
        ; left_id  = refl
        ; right_id = refl
        ; assoc    = refl
        }

--=================================================================--
-- PART 3 : Defining a Monad on category C
--=================================================================--
-- These are projections on the Category record to make life easier --
Ob      = Category.Ob
Hom     = Category.Hom
id      = Category.id
compose = Category._‚Ä£_

left  = Category.left_id
right = Category.right_id
assoc = Category.assoc
-------------------------------------------------------------------------------------------------------------------------
-- Given category C, a Monad on C consists of:                                                                         --
-- - T : C ‚Üí C                                              an endofunctor                                             --
-- - Œ∑ : {X : Ob C} ‚Üí Hom C X (T X)                         a natural transformation                                   --
--                                                          from (X ‚àà C) to a morphism (X ‚Üí (T X)) ‚àà C                 --
-- - Œº : {X : Ob C} ‚Üí Hom C (T T X) (T X)                   a natural transformation                                   --
--                                                          from (X ‚àà C) to a morphism ((T T X) ‚Üí (T X)) ‚àà C           --
-- alternatively (as a Kleisli Triple):                                                                                --
--   T : Ob C ‚Üí Ob C                                        the object part of the endofunctor                         --
-- - * : {X Y : Ob C} ‚Üí Hom C X (T Y) ‚Üí Hom C (T X) (T Y)   a transformation                                           --
--                                                          from morphism (f : X ‚Üí T Y) to a morphism (f* : T X ‚Üí T Y) --
-- Then we have the laws: left_monad_id, right_monad_id, monad_assoc.                                                  --
-------------------------------------------------------------------------------------------------------------------------
-- Here, we define a Monad as a Kleisli Triple instead of the traditional mathematical way. This is so I don't have to --
-- implement a record for functors. This is, additionally, more similar to monads defined in programming languages     --
-- such as Haskell.                                                                                                    --
-------------------------------------------------------------------------------------------------------------------------
record Monad {l : Level}{C : Category {l}} : Set (lsuc l) where
  field T  : Ob C ‚Üí Ob C
        Œ∑  : {X : Ob C} ‚Üí Hom C X (T X)
        _* : {X Y : Ob C} ‚Üí Hom C X (T Y) ‚Üí Hom C (T X) (T Y)

        monad_lid   : {X Y : Ob C} {f : Hom C X (T Y)} ‚Üí
                      compose C Œ∑ (f *) ‚â° f
        monad_rid   : {X : Ob C} ‚Üí (Œ∑ {X})* ‚â° id C {T X}
        monad_assoc : {X Y Z : Ob C} {f : Hom C X (T Y)} {g : Hom C Y (T Z)} ‚Üí
                      compose C (f *) (g *) ‚â° (compose C f (g *)) *

--Now we can check that our solution to the state monad was correct--
--First, we define the data type for the product and projections--
data _√ó_ (A B : Set) : Set where
  _,_ : A ‚Üí B ‚Üí A √ó B

œÄ‚ÇÅ : {A B : Set} ‚Üí (A √ó B) ‚Üí A
œÄ‚ÇÅ (a , b) = a

œÄ‚ÇÇ : {A B : Set} ‚Üí (A √ó B) ‚Üí B
œÄ‚ÇÇ (a , b) = b

œÄid : {A B : Set}{p : A √ó B} ‚Üí œÄ‚ÇÅ p , œÄ‚ÇÇ p ‚â° p
œÄid {A}{B}{a , b} = refl

--Would like to thank Martin Escardo and Paul Levy for help with this proof--
postulate exten : {X Y : Set}{f g : X ‚Üí Y} ‚Üí ((x : X) ‚Üí f x ‚â° g x) ‚Üí (f ‚â° g)

exten2 : {X Y Z : Set}{f g : X ‚Üí Y ‚Üí Z} ‚Üí ((x : X)(y : Y) ‚Üí f x y ‚â° g x y) ‚Üí (f ‚â° g)
exten2 h = exten (Œª x ‚Üí exten(h x))

--Finally, we define the monad and prove it's properties--
state : Set ‚Üí Monad {lsuc lzero}{set}
state S = record
          { T  = Œª A ‚Üí S ‚Üí (S √ó A)
          ; Œ∑  = Œª a ‚Üí Œª s ‚Üí (s , a)
          ; _* = Œª g f ‚Üí Œª s ‚Üí g (œÄ‚ÇÇ (f s)) (œÄ‚ÇÅ (f s))
          ; monad_lid   = refl
          ; monad_rid   = lemma_rid
          ; monad_assoc = refl
          }
          where
            lemma_rid : {A : Ob set} ‚Üí
                        (Œª f s ‚Üí œÄ‚ÇÅ (f s) , œÄ‚ÇÇ (f s))
                        ‚â° id set {S ‚Üí (S √ó A)}
            lemma_rid {A} =
              begin
                (Œª f s ‚Üí œÄ‚ÇÅ (f s) , œÄ‚ÇÇ (f s))
                ‚â°‚ü® exten2 (Œª f s ‚Üí œÄid {p = f s}) ‚ü©
                (Œª f s ‚Üí f s)
                ‚â°‚ü® refl ‚ü©
                (Œª f ‚Üí f)
              ‚àé
{-
(Œª f s ‚Üí œÄ‚ÇÅ (f s) , œÄ‚ÇÇ (f s))
(Œª f s ‚Üí f s)
(Œª f ‚Üí f)
-}
